/* ---

  Available modes:
    • gulp (one-time rebuild; minify CSS & JS; BrowserSync disabled; Babel active)
    • gulp watch (watching files changes; expanded CSS & JS):
      • --sync (BrowserSync active)
      • --es5 (Babel active)

  [!] DO NOT EDIT THIS FILE!

    You can change configuration in gulpfile-config.js file

--- */

  const

    gulp           = require('gulp'),
    sassGlob       = require('gulp-sass-glob'),
    plumber        = require('gulp-plumber'),
    sass           = require('gulp-sass'),
    autoprefixer   = require('gulp-autoprefixer'),
    mergeQueries   = require('gulp-group-css-media-queries'),
    minify         = require('gulp-minifier'),
    jsValidate     = require('gulp-jsvalidate'),
    babel          = require('gulp-babel'),
    gutil          = require('gulp-util'),
    gulpif         = require('gulp-if'),
    concat         = require('gulp-concat'),
    browserSync    = require('browser-sync'),

    onErrorStyles  = function(error) {

      gutil.beep()

      if (!error.messageOriginal) {

        gutil.log(gutil.colors.red('Error  : ') + error.message)
        gutil.log(gutil.colors.red('Plugin : ') + error.plugin)

      } else {

        gutil.log(gutil.colors.red('Error : ') + error.messageOriginal)
        gutil.log(gutil.colors.red('File  : ') + error.file)
        gutil.log(gutil.colors.red('Line  : ') + error.line)

      } 

    },
    onErrorScripts = function(error) {

      gutil.beep()

      gutil.log(gutil.colors.red('Error : ') + error.description)
      gutil.log(gutil.colors.red('File  : ') + error.fileName)
      gutil.log(gutil.colors.red('Line  : ') + error.lineNumber)

    }

  const config    = require('./gulpfile-config')
  let watchMode   = false
  let babelActive = true

  /* ---
    CSS & JS tasks
  --- */

    for (let i = 0; i < config.files.css.length; i++) {
      
      gulp.task('styles-[' + i + ']', () => {

        let task = gulp
          .src(
            config.files.css[i].import
          )
          .pipe(sassGlob())
          .pipe(plumber({
            errorHandler : onErrorStyles
          }))
          .pipe(
            sass({
              outputStyle : 'expanded'
            })
          )
          .pipe(autoprefixer(config.autoprefixerOptions))
          .pipe(mergeQueries())
          .pipe(gulpif(!watchMode && config.files.css[i].bundle,
            minify({
              minify    : true,
              minifyCSS : true
            })
          ))
          .pipe(concat(config.files.css[i].output[0].file))
          .pipe(gulp.dest(config.files.css[i].output[0].path))
          .pipe(gulpif((config.files.css[i].output[0].browserSync && config.browserSyncOptions.active),
            browserSync.stream()
          ))
          .on('finish', function() {
            gutil.log(gutil.colors.green(config.files.css[i].label + ' done!'))
          })

        for (let index in config.files.css[i].output) {

          if (index == 0)
            continue

          task
            .pipe(concat(config.files.css[i].output[index].file))
            .pipe(gulp.dest(config.files.css[i].output[index].path))
            .pipe(gulpif((config.files.css[i].output[index].browserSync && config.browserSyncOptions.active),
              browserSync.stream()
            ))

        }

        if (!watchMode)
          return task

      })

    }

    for (let i = 0; i < config.files.js.length; i++) {

      gulp.task('scripts-[' + i + ']', () => {

        let task = gulp
          .src(
            config.files.js[i].import
          )
          .pipe(jsValidate()).on('error', onErrorScripts)
          .pipe(gulpif(babelActive && config.files.js[i].babel,
            babel({
              presets: ['es2015']
            })
          ))
          .pipe(gulpif(!watchMode && config.files.js[i].bundle,
            minify({
              minify   : true,
              minifyJS : true
            })
          ))
          .pipe(concat(config.files.js[i].output[0].file))
          .pipe(gulp.dest(config.files.js[i].output[0].path))
          .on('finish', function() {
            gutil.log(gutil.colors.green(config.files.js[i].label + ' done!'))
          })

        for (let index in config.files.js[i].output) {

          if (index == 0)
            continue

          task
            .pipe(concat(config.files.js[i].output[index].file))
            .pipe(gulp.dest(config.files.js[i].output[index].path))

        }

        if (!watchMode)
          return task

      })

    }

  /* ---
    Default task
  --- */

    let firstOrderTasks  = []
    let secondOrderTasks = []

    for (let i = 0; i < config.files.css.length; i++) {

      if (!config.files.css[i].bundle)
        firstOrderTasks.push('styles-[' + i + ']')
      else
        secondOrderTasks.push('styles-[' + i + ']')

    }

    for (let i = 0; i < config.files.js.length; i++) {

      if (!config.files.js[i].bundle)
        firstOrderTasks.push('scripts-[' + i + ']')
      else
        secondOrderTasks.push('scripts-[' + i + ']')

    }

    gulp.task('default', firstOrderTasks, function() {

      gulp.start(secondOrderTasks)

    })

  /* ---
    Gulp watch
  --- */

    gulp.task('watcher', function() {

      for (let i = 0; i < config.files.css.length; i++) {

        gulp.watch(
          config.files.css[i].import,
          ['styles-[' + i + ']']
        )

      }

      for (let i = 0; i < config.files.js.length; i++) {

        gulp.watch(
          config.files.js[i].import,
          ['scripts-[' + i + ']']
        )

      }

    })

    gulp.task('watch', firstOrderTasks, function() {

      gulp.start(secondOrderTasks)
      gulp.start('watcher')

      watchMode = true

      if (process.argv.indexOf('--sync') > -1) {

        config.browserSyncOptions.active = true

        browserSync.init({
          proxy : config.browserSyncOptions.proxy,
          port  : config.browserSyncOptions.port,
          open  : false
        })

      } else {

        config.browserSyncOptions.active = false

      }

      if (process.argv.indexOf('--es5') == -1)
        babelActive = false

    })